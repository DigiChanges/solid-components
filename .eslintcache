[{"/Volumes/DatosM2/projects/DigiChanges/solid-components/src/Multiselect/Multiselect.tsx":"1","/Volumes/DatosM2/projects/DigiChanges/solid-components/src/Multiselect/index.ts":"2","/Volumes/DatosM2/projects/DigiChanges/solid-components/src/index.ts":"3"},{"size":17477,"mtime":1636066441480,"results":"4","hashOfConfig":"5"},{"size":31,"mtime":1636066603770,"results":"6","hashOfConfig":"5"},{"size":117,"mtime":1636067690340,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"pbqjlp",{"filePath":"11","messages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"13","messages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Volumes/DatosM2/projects/DigiChanges/solid-components/src/Multiselect/Multiselect.tsx",["15","16"],"import { createEffect, createSignal, mergeProps, splitProps, onMount, Component } from 'solid-js';\nimport { For } from 'solid-js/web';\nimport classNames from 'classnames';\nimport './Multiselect.css';\n\n// const DownArrow = 'https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Angle_down_font_awesome.svg/1200px-Angle_down_font_awesome.svg.png';\nconst DownArrow = 'https://upload.wikimedia.org/wikipedia/commons/thumb/e/ec/Angle_down_font_awesome.svg/1200px-Angle_down_font_awesome.svg.png';\n\ntype Option = {\n    item: Record<string, string | number> | string | number;\n}\n\nconst defaultProps = {\n    id: '',\n    emptyRecordMsg: 'No records found',\n    options: [],\n    selectedValues: [],\n    showArrow: false,\n    singleSelect: false,\n    style: {},\n    placeholder: 'select',\n    onSelect: () =>\n    {},\n    onRemove: () =>\n    {}\n};\n\nexport interface IMultiselectProps {\n    options: Option[];\n    disablePreSelectedValues?: boolean;\n    selectedValues?: Option[];\n    isObject?: boolean;\n    displayValue?: string;\n    showCheckbox?: boolean;\n    selectionLimit?: number;\n    placeholder?: string;\n    groupBy?: string;\n    style?: object;\n    emptyRecordMsg?: string;\n    onSelect?: ( selectedList: Option[], selectedItem: Option ) => void;\n    onRemove?: ( selectedList: Option[], selectedItem: Option ) => void;\n    onSearch?: ( value:string ) => void;\n    closeIcon?: string;\n    singleSelect?: boolean;\n    caseSensitiveSearch?: boolean;\n    id?: string;\n    closeOnSelect?: boolean;\n    avoidHighlightFirstOption?: boolean;\n    hidePlaceholder?: boolean;\n    showArrow?: boolean;\n    keepSearchTerm?: boolean;\n    disable?: boolean;\n    loading?: boolean;\n    loadingMessage?: string;\n    customCloseIcon?: Element | string;\n}\n\nconst closeIconTypes = {\n    circle: DownArrow, // CloseCircleDark,\n    circle2: DownArrow // CloseCircle\n    // close: CloseSquare,\n    // cancel: CloseLine\n};\n\nexport const Multiselect: Component<IMultiselectProps> = ( props: IMultiselectProps ) =>\n{\n    props = mergeProps( defaultProps, props );\n    const [ local ] = splitProps( props, [ 'placeholder', 'style', 'singleSelect', 'id', 'hidePlaceholder', 'disable', 'showArrow', 'avoidHighlightFirstOption' ] );\n    const { placeholder, style, singleSelect, id, hidePlaceholder, disable, showArrow, avoidHighlightFirstOption } = local;\n\n    const [ toggleOptionsList, setToggleOptionsList ] = createSignal( false );\n    const [ highlightOption, setHighlightOption ] = createSignal( avoidHighlightFirstOption ? -1 : 0 );\n    const [ inputValue, setInputValue ] = createSignal( '' );\n    const [ options, setOptions ] = createSignal<Option[]>( props.options );\n    const [ filteredOptions, setFilteredOptions ] = createSignal( props.options );\n    const [ unfilteredOptions, setUnfilteredOptions ] = createSignal( props.options );\n    const [ selectedValues, setSelectedValues ] = createSignal<Option[]>( Object.assign( [], props.selectedValues ) );\n    const [ preSelectedValues, setPreSelectedValues ] = createSignal( Object.assign( [], props.selectedValues ) );\n    const [ keepSearchTerm, setKeepSearchTerm ] = createSignal( props.keepSearchTerm );\n    const [ closeIconType, setCloseIconType ] = createSignal( closeIconTypes[props.closeIcon] || closeIconTypes['circle'] );\n\n\n    let optionTimeout: NodeJS.Timeout;\n    let searchBox: HTMLInputElement;\n    const searchWrapper = ( el: HTMLInputElement ) => el.addEventListener( 'click', listenerCallback );\n\n    function renderGroupByOptions ()\n    {\n        return ( <div>not implemented</div> );\n    }\n\n    const isSelectedValue = ( item: Option ) =>\n    {\n        if ( props.isObject )\n        {\n            return (\n                selectedValues().filter( ( i: Option ) => i[props.displayValue] === item[props.displayValue] )\n                    .length > 0\n            );\n        }\n        return selectedValues().filter( i => i === item ).length > 0;\n    };\n    const fadeOutSelection = ( item: Option ) =>\n    {\n        if ( props.singleSelect )\n        {\n            return;\n        }\n        if ( props.selectionLimit == -1 )\n        {\n            return false;\n        }\n        if ( props.selectionLimit != selectedValues().length )\n        {\n            return false;\n        }\n        if ( props.selectionLimit == selectedValues().length )\n        {\n            if ( !props.showCheckbox )\n            {\n                return true;\n            }\n            else\n            {\n                if ( isSelectedValue( item ) )\n                {\n                    return false;\n                }\n                return true;\n            }\n        }\n    };\n\n    const isDisablePreSelectedValues = ( value ) =>\n    {\n        if ( !props.disablePreSelectedValues || !preSelectedValues().length )\n        {\n            return false;\n        }\n        if ( props.isObject )\n        {\n            return (\n                preSelectedValues().filter( i => i[props.displayValue] === value[props.displayValue] )\n                    .length > 0\n            );\n        }\n        return preSelectedValues().filter( i => i === value ).length > 0;\n    };\n\n    const removeSelectedValuesFromOptions = ( skipCheck ) =>\n    {\n\n        if ( !skipCheck && props.groupBy )\n        {\n            // groupByOptions(options());\n        }\n        if ( !selectedValues().length && !skipCheck )\n        {\n            return;\n        }\n        if ( props.isObject )\n        {\n            const optionList = unfilteredOptions().filter( item =>\n            {\n                return selectedValues().findIndex(\n                    v => v[props.displayValue] === item[props.displayValue]\n                ) === -1\n                    ? true\n                    : false;\n            } );\n            if ( props.groupBy )\n            {\n                // groupByOptions(optionList);\n            }\n            setOptions( optionList );\n            setFilteredOptions( optionList );\n            // TODO: Fix wait\n            setTimeout( () =>\n            {\n                filterOptionsByInput();\n            }, 0 );\n            return;\n        }\n        const optionList = unfilteredOptions().filter(\n            item => selectedValues().indexOf( item ) === -1\n        );\n\n        setOptions( optionList );\n        setFilteredOptions( optionList );\n        // TODO: Fix wait\n        setTimeout( () =>\n        {\n            filterOptionsByInput();\n        }, 0 );\n    };\n\n    const initialSetValue = () =>\n    {\n\n        if ( !props.showCheckbox && !props.singleSelect )\n        {\n            removeSelectedValuesFromOptions( false );\n        }\n\n        // if (props.groupBy) {\n        //     groupByOptions(options());\n        // }\n    };\n\n    createEffect( ( prevOptions ) =>\n    {\n        if ( JSON.stringify( prevOptions ) !== JSON.stringify( props.options ) )\n        {\n            setOptions( props.options );\n            setFilteredOptions( props.options );\n            setUnfilteredOptions( props.options );\n            // TODO: Fix wait\n            setTimeout( () =>\n            {\n                initialSetValue();\n            }, 0 );\n        }\n        return props.options;\n    }, props.options );\n\n    createEffect( ( prevSelectedvalues ) =>\n    {\n        if ( JSON.stringify( prevSelectedvalues ) !== JSON.stringify( props.selectedValues ) )\n        {\n            setSelectedValues( Object.assign( [], props.selectedValues ) );\n            setPreSelectedValues( Object.assign( [], props.selectedValues ) );\n            // TODO: Fix wait\n            setTimeout( () =>\n            {\n                initialSetValue();\n            }, 0 );\n        }\n        return props.selectedValues;\n    }, props.selectedValues );\n\n    onMount( () =>\n    {\n        initialSetValue();\n    } );\n\n    const onSingleSelect = ( item ) =>\n    {\n        setSelectedValues( [ item ] );\n        setToggleOptionsList( false );\n    };\n\n    const onRemoveSelectedItem = ( item ) =>\n    {\n        let index = 0;\n        const newSelectedValues = [ ...selectedValues() ];\n        if ( props.isObject )\n        {\n            index = newSelectedValues.findIndex(\n                i => i[props.displayValue] === item[props.displayValue]\n            );\n        }\n        else\n        {\n            index = newSelectedValues.indexOf( item );\n        }\n        newSelectedValues.splice( index, 1 );\n        props.onRemove( newSelectedValues, item );\n        setSelectedValues( newSelectedValues );\n        if ( !props.showCheckbox )\n        {\n            removeSelectedValuesFromOptions( true );\n        }\n        if ( !props.closeOnSelect )\n        {\n            searchBox.focus();\n        }\n    };\n\n    const onSelectItem = ( item: Option ) => () =>\n    {\n\n        if ( !keepSearchTerm )\n        {\n            setInputValue( '' );\n        }\n        if ( props.singleSelect )\n        {\n            onSingleSelect( item );\n            props.onSelect( [ item ], item );\n            return;\n        }\n        if ( isSelectedValue( item ) )\n        {\n            onRemoveSelectedItem( item );\n            return;\n        }\n        if ( props.selectionLimit == selectedValues().length )\n        {\n            return;\n        }\n\n        const newSelectedValues: Option[] = [ ...selectedValues(), item ];\n\n        props.onSelect( newSelectedValues, item );\n\n        setSelectedValues( newSelectedValues );\n\n        if ( !props.showCheckbox )\n        {\n            removeSelectedValuesFromOptions( true );\n        }\n        else\n        {\n            filterOptionsByInput();\n        }\n\n        if ( !props.closeOnSelect )\n        {\n            searchBox.focus();\n        }\n    };\n\n    function renderNormalOption ()\n    {\n        return (\n            <For each={ options() } fallback={\n                <span style={props.style['notFound']} class={'notFound'}>\n                    {props.emptyRecordMsg ?? 'No Options Available'}\n                </span>\n            }>\n                {( option, index ) =>\n                    <li\n                        style={props.style['option']}\n                        class={classNames( 'option', {\n                            'disableSelection': fadeOutSelection( option ),\n                            'highlightOption highlight': highlightOption() === index()\n                        } ) }\n                        onClick={onSelectItem( option )}\n                    >\n                        {props.showCheckbox && !props.singleSelect && (\n                            <input\n                                type=\"checkbox\"\n                                readOnly\n                                class=\"checkbox\"\n                                checked={isSelectedValue( option )}\n                            />\n                        )}\n                        {props.isObject ? option[props.displayValue] : ( option || '' ).toString()}\n                    </li>}\n            </For>\n        );\n    }\n\n    function renderOptionList ()\n    {\n        const loadingMessage = props.loadingMessage ?? 'loading...';\n        if ( props.loading )\n        {\n            return (\n                <ul class=\"optionContainer\" style={props.style['optionContainer']}>\n                    {typeof loadingMessage === 'string' && <span style={props.style['loadingMessage']} class=\"notFound\">{loadingMessage}</span>}\n                    {typeof loadingMessage !== 'string' && loadingMessage}\n                </ul>\n            );\n        }\n        return (\n            <ul class=\"optionContainer\" style={props.style['optionContainer']}>\n                {!props.groupBy ? renderNormalOption() : renderGroupByOptions()}\n            </ul>\n        );\n    }\n\n    const listenerCallback = () =>\n    {\n        searchBox.focus();\n    };\n\n    const toggelOptionList = () =>\n    {\n        setToggleOptionsList( !toggleOptionsList() );\n        setHighlightOption( avoidHighlightFirstOption ? -1 : 0 );\n    };\n\n    const matchValues = ( value, search ) =>\n    {\n        if ( props.caseSensitiveSearch )\n        {\n            return value.indexOf( search ) > -1;\n        }\n        if ( value.toLowerCase )\n        {\n            return value.toLowerCase().indexOf( search.toLowerCase() ) > -1;\n        }\n        return value.toString().indexOf( search ) > -1;\n    };\n\n    const filterOptionsByInput = () =>\n    {\n        let newOptions: Option[];\n        if ( props.isObject )\n        {\n            newOptions = filteredOptions().filter( i => matchValues( i[props.displayValue], inputValue() ) );\n        }\n        else\n        {\n            newOptions = filteredOptions().filter( i => matchValues( i, inputValue() ) );\n        }\n        // groupByOptions(newOptions);\n        setOptions( newOptions );\n    };\n\n    const onInput = ( event ) =>\n    {\n        setInputValue( event.target.value );\n        // TODO: Fix wait setInputValue\n        setTimeout( () =>\n        {\n            filterOptionsByInput();\n        }, 0 );\n        if ( props.onSearch )\n        {\n            props.onSearch( event.target.value );\n        }\n    };\n\n    const onFocus = () =>\n    {\n        if ( toggleOptionsList() )\n        {\n            clearTimeout( optionTimeout );\n        }\n        else\n        {\n            toggelOptionList();\n        }\n    };\n\n    const onBlur = () =>\n    {\n        optionTimeout = setTimeout( toggelOptionList, 250 );\n    };\n\n    const onArrowKeyNavigation = ( e ) =>\n    {\n        if ( e.keyCode === 8 && !inputValue() && !props.disablePreSelectedValues && selectedValues().length )\n        {\n            onRemoveSelectedItem( selectedValues().length - 1 );\n        }\n        if ( !options().length )\n        {\n            return;\n        }\n        if ( e.keyCode === 38 )\n        {\n            if ( highlightOption() > 0 )\n            {\n                setHighlightOption( ( previousState ) => previousState - 1 );\n            }\n            else\n            {\n                setHighlightOption( options().length - 1 );\n            }\n        }\n        else if ( e.keyCode === 40 )\n        {\n            if ( highlightOption() < options().length - 1 )\n            {\n                setHighlightOption( ( previousState ) => previousState + 1 );\n            }\n            else\n            {\n                setHighlightOption( 0 );\n            }\n        }\n        else if ( e.key === 'Enter' && options().length && toggleOptionsList() )\n        {\n            if ( highlightOption() === -1 )\n            {\n                return;\n            }\n            onSelectItem( options()[highlightOption()] )();\n        }\n    };\n\n    function renderSelectedList ()\n    {\n        return  (\n            <For each={selectedValues()} >\n                { ( value ) =>\n                    <span\n                        class={classNames( 'chip', {\n                            singleChip: props.singleSelect,\n                            disableSelection: isDisablePreSelectedValues( value )\n                        } )}\n                        style={props.style['chips']}\n                    >\n                        {!props.isObject ? ( value || '' ).toString() : value[props.displayValue]}\n                        {!isDisablePreSelectedValues( value ) && ( !props.customCloseIcon ?\n                            <img\n                                class=\"icon_cancel closeIcon\"\n                                src={closeIconType()}\n                                onClick={() => onRemoveSelectedItem( value )}\n                            /> :\n                            <i class=\"custom-close\" onClick={() => onRemoveSelectedItem( value )}>{props.customCloseIcon}</i> )}\n                    </span>}\n            </For>\n        );\n    }\n\n    function renderMultiselectContainer ()\n    {\n        return (\n            <div class={classNames( 'multiselect-container multiSelectContainer', { disable_ms : disable } )}\n                id={id || 'multiselectContainerSolid'}\n                style={style['multiselectContainer']}\n            >\n                <div class={classNames( 'search-wrapper searchWrapper', { singleSelect } )}\n                    ref={searchWrapper} style={style['searchBox']}\n                    onClick={singleSelect ? toggelOptionList : () =>\n                    { }}\n                >\n                    {renderSelectedList()}\n                    <input\n                        type=\"text\"\n                        ref={searchBox}\n                        class=\"searchBox\"\n                        id={`${id || 'search'}_input`}\n                        onInput={onInput}\n                        value={inputValue()}\n                        onFocus={onFocus}\n                        onBlur={onBlur}\n                        placeholder={( ( singleSelect && selectedValues().length ) || ( hidePlaceholder && selectedValues().length ) ) ? '' : placeholder}\n                        onKeyDown={onArrowKeyNavigation}\n                        style={style['inputField']}\n                        // autoComplete=\"off\"\n                        disabled={singleSelect || disable}\n                    />\n                    {( singleSelect || showArrow ) &&\n                    <img\n                        src={DownArrow}\n                        class=\"icon_cancel icon_down_dir\"\n                    />\n                    }\n                </div>\n                <div\n                    class={classNames( 'optionListContainer',  { displayBlock : toggleOptionsList(), displayNone: !toggleOptionsList() } )}\n                >\n                    {renderOptionList()}\n                </div>\n            </div>\n        );\n    }\n\n\n    return renderMultiselectContainer();\n};\n","/Volumes/DatosM2/projects/DigiChanges/solid-components/src/Multiselect/index.ts",[],"/Volumes/DatosM2/projects/DigiChanges/solid-components/src/index.ts",[],{"ruleId":"17","severity":1,"message":"18","line":79,"column":29,"nodeType":"19","messageId":"20","endLine":79,"endColumn":46},{"ruleId":"17","severity":1,"message":"21","line":80,"column":28,"nodeType":"19","messageId":"20","endLine":80,"endColumn":44},"@typescript-eslint/no-unused-vars","'setKeepSearchTerm' is assigned a value but never used.","Identifier","unusedVar","'setCloseIconType' is assigned a value but never used."]